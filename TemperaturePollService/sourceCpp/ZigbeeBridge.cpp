
#include "Credentials.h"
#include "ZigbeeBridge.h"


WriteMemoryStruct ZigbeeBridge::content;          // storage for curl writefunction


ZigbeeBridge::ZigbeeBridge()
{
    CURL *handle = getHandle();

    // set curls parameters for reading zigbee bridge
    curl_easy_setopt( handle, CURLOPT_URL, URL );
    curl_easy_setopt( handle, CURLOPT_HTTPGET, 1L );
    curl_easy_setopt( handle, CURLOPT_WRITEFUNCTION, writeData );
    curl_easy_setopt( handle, CURLOPT_WRITEDATA, (void *)&content );
}


string ZigbeeBridge::getRawDataString()
{
    content.memory = {};              // no data initially
    content.memory.reserve( 3000 );   // approximated max. size
    content.size = 0;

    perform();  // perform curl actions

    return string( content.memory.begin(), content.memory.end() );
}


size_t ZigbeeBridge::writeData( void *buffer, size_t size, size_t nmemb, void *userp )
{
  // function "writeData" may be called more than once!
  // "buffer": pointer to new data to be saved
  // "size": always equal 1 (see curls docu)
  // "nmemb": size of data to be saved, maybe equal 0!
  // return value: size of processed data, 
  //    if unequal to nmemb -> CURLE_WRITE_ERROR will be generated by curl

  WriteMemoryStruct *mem = (WriteMemoryStruct *)userp;

  vector<char> buff( (char *)buffer, (char *)buffer + nmemb );
  mem->memory.insert( mem->memory.end(), buff.begin(), buff.end() );
  mem->size += nmemb;

  return nmemb;
}